


	Graph consists of either:
	
		SmerMap (indexing, optimized for adding nodes)
		SmerArray (routing)
		
	SmerMap
		16384 slices (2^14) - balanced using prefix-mixing
		
		Node split into 7bp prefix and lower 16bp
	
		Hash calculated based on the lower 16bp
			Lower part of hash determined location in slice
			Upper part of hash mixed with 7bp prefix determines slice
			
			 
	SmerArray
		16384 slices (2^14) - 1:1 with SmerMap slices
		
		Each slice contains queue of inbound requests from other slices
		
		
	Indexing Parallel Task:
	
		Parsing Thread (master): 
			Parses reads into SwqBuffers
			Submits to ParallelTask
			
		Ingress Thread:
			Pack Sequence
			Determine possible smers
			Check which already exist in SmerMap
			Insert extra if insufficent
			
			
	Building Parallel Task:			 
			
		Parsing Thread (master): 
			Parses reads into SwqBuffers
			Submits to ParallelTask
		
		Ingress Thread:
			Pack Sequence
			Determine possible smers
			Prefilter smers with Bloom
			Determine index of smers from SmerArtray
			Determine first smer per read
			Queue first-smer task			
			
		-- or --
		
		Ingress Thread:
			Pack Sequence
			Determine possible smers
			Queue smer-check tasks (per slice)
			
		Intermediate 1: (per slice)
			Check smers
			
		Intermediate 2:
			Determine first smer per read
			Queue first-smer task
			
		


	Handling Sequence Names and Quality Scores:
	
		Idea: Link names/qualities to first smer in sequence

			
		Problem 1:
			Position in first smer is potentially ambiguous until fully inserted
						
		Option 1A:			
			Store label in last smer
			
				
		Problem 2: 
			Long sequences need more frequent labels to be efficiently retrieved
			
		Option 2A: 
			Label sequence intermittently 
			
		
		
		
		
		
	Profiles:
		
		export CPUPROFILE=gperf.out	
		pprof LOGAN-Graph-Native/bin/LOGAN gperf.out
		top20
	
	
	
	Performance target: 100GB data / 1GB genome -> 1 hour (on cessna)
			1 billion reads per hr
			~16M reads per minute
			~3.6s per million reads
			
			29,493,880 reads in 32.936886
			
			
	Dataset Profiles:		
		
		
		Ecoli-1: Reads: 7248696 Smers: 1810392 (single threaded)

		 11.212197s using 8 threads (desktop): 
		 
		Original: (size > 40bp, 7143305 reads used, 1796025 smers)
			1 thread - 488.2s	4 threads - 305.7s 
		 
Total: 4724 samples
     739  15.6%  15.6%      753  15.9% scanForSmer_HS (inline)
     495  10.5%  26.1%      611  12.9% assignSmersToIntermediates
     469   9.9%  36.0%      469   9.9% testBloom
     364   7.7%  43.8%      364   7.7% siitFindSmer
     344   7.3%  51.0%      344   7.3% readBufferedFastqLine (inline)
     319   6.8%  57.8%      344   7.3% calculatePossibleSmersComp
     270   5.7%  63.5%     1294  27.4% scanForSmerLookups
     220   4.7%  68.2%      227   4.8% skipBufferedFastqLine (inline)
     181   3.8%  72.0%      182   3.9% assignIntermediatesToEntryLookups
     166   3.5%  75.5%      635  13.4% saFindSmerEntry
     134   2.8%  78.3%      140   3.0% calculatePossibleSmers
     129   2.7%  81.1%      892  18.9% smFindIndexesOfExistingSmers
     127   2.7%  83.8%      135   2.9% allocEntryLookupBlock (inline)
      94   2.0%  85.8%       94   2.0% __GI_madvise
      91   1.9%  87.7%       91   1.9% packSequence
      58   1.2%  88.9%       58   1.2% __memmove_ssse3_back
      57   1.2%  90.1%       61   1.3% hashForSmer
      51   1.1%  91.2%       51   1.1% __read_nocancel
      46   1.0%  92.2%     1138  24.1% addPathSmers
      44   0.9%  93.1%       44   0.9% smGetSmerCount_S (inline)

		 
		
	
		Ecoli-2: Reads: 218470592 Smers: 5717584
		
		245.432265s using 16 threads (cessna) 
	
Total: 208191 samples
   25954  12.5%  12.5%    26892  12.9% smFindIndexesOfExistingSmers
   20411   9.8%  22.3%    23641  11.4% parseAndProcess
   20345   9.8%  32.0%    20345   9.8% siitFindSmer
   19939   9.6%  41.6%    29925  14.4% assignSmersToIntermediates
   19931   9.6%  51.2%    19931   9.6% testBloom
   18412   8.8%  60.0%    18735   9.0% calculatePossibleSmersComp
   13816   6.6%  66.7%    60767  29.2% scanForSmerLookups
   10607   5.1%  71.8%    10609   5.1% calculatePossibleSmers
   10337   5.0%  76.7%    71946  34.6% trDoIngress
   10159   4.9%  81.6%    10195   4.9% assignIntermediatesToEntryLookups
    7612   3.7%  85.3%     7612   3.7% memcpy
    6675   3.2%  88.5%    26606  12.8% saFindSmerEntry
    5394   2.6%  91.1%     5394   2.6% madvise
    4227   2.0%  93.1%     4227   2.0% packSequence
    2939   1.4%  94.5%    41914  20.1% addPathSmers
    2341   1.1%  95.6%     2547   1.2% hashForSmer
    2323   1.1%  96.7%     2327   1.1% __read_nocancel
    1419   0.7%  97.4%     1419   0.7% __memset_sse2
    1083   0.5%  98.0%     1088   0.5% sliceForSmer
     801   0.4%  98.3%      801   0.4% __strchr_sse42

	
	
	
	
		Arabi-1: Reads: 29493880 Smers: 7969993 (single threaded)
	
		34.022125s using 16 threads (cessna)
	
Total: 29311 samples
    5373  18.3%  18.3%     5595  19.1% smFindIndexesOfExistingSmers
    2983  10.2%  28.5%     2983  10.2% siitFindSmer
    2754   9.4%  37.9%     3193  10.9% parseAndProcess
    2448   8.4%  46.3%     2448   8.4% testBloom
    2357   8.0%  54.3%     3527  12.0% assignSmersToIntermediates
    2096   7.2%  61.4%     2142   7.3% calculatePossibleSmersComp
    1803   6.2%  67.6%     7953  27.1% scanForSmerLookups
    1513   5.2%  72.8%     8869  30.3% trDoIngress
    1264   4.3%  77.1%     1295   4.4% assignIntermediatesToEntryLookups
    1167   4.0%  81.1%     1168   4.0% calculatePossibleSmers
     921   3.1%  84.2%      921   3.1% memcpy
     719   2.5%  86.7%     3167  10.8% saFindSmerEntry
     668   2.3%  88.9%      668   2.3% madvise
     527   1.8%  90.7%      527   1.8% packSequence
     463   1.6%  92.3%     7502  25.6% addPathSmers
     361   1.2%  93.5%      372   1.3% hashForSmer
     321   1.1%  94.6%      321   1.1% __read_nocancel
     308   1.1%  95.7%      308   1.1% __lll_unlock_wake
     215   0.7%  96.4%      215   0.7% __memset_sse2
     212   0.7%  97.1%      212   0.7% __lll_lock_wait
	
 		44.976393s using 8 threads (desktop)
 		
 Total: 21781 samples
    3309  15.2%  15.2%     3393  15.6% scanForSmer_HS (inline)
    2398  11.0%  26.2%     2398  11.0% siitFindSmer
    2326  10.7%  36.9%     3045  14.0% assignSmersToIntermediates
    1948   8.9%  45.8%     1948   8.9% testBloom
    1472   6.8%  52.6%     1474   6.8% readBufferedFastqLine (inline)
    1405   6.5%  59.0%     1499   6.9% calculatePossibleSmersComp
    1178   5.4%  64.4%     6141  28.2% scanForSmerLookups
    1028   4.7%  69.2%     1052   4.8% assignIntermediatesToEntryLookups
     819   3.8%  72.9%      837   3.8% skipBufferedFastqLine (inline)
     705   3.2%  76.2%      772   3.5% calculatePossibleSmers
     643   3.0%  79.1%     4097  18.8% smFindIndexesOfExistingSmers
     607   2.8%  81.9%     2555  11.7% saFindSmerEntry
     477   2.2%  84.1%      477   2.2% __memmove_ssse3_back
     439   2.0%  86.1%      480   2.2% allocEntryLookupBlock (inline)
     426   2.0%  88.1%      426   2.0% __GI_madvise
     400   1.8%  89.9%      400   1.8% packSequence
     301   1.4%  91.3%      301   1.4% __GI___read
     260   1.2%  92.5%      285   1.3% hashForSmer
     200   0.9%  93.4%     5346  24.5% addPathSmers
     147   0.7%  94.1%      147   0.7% __memset_sse2
 		
 		
	
		Pen-1: Reads: 450786851 reads Smers: 53888249 
		
		Jellyfish 2.2: 1417.936s 
		
		645.088589s using 16 threads (cessna)	
		
Total: 755176 samples
  123527  16.4%  16.4%   123527  16.4% siitFindSmer
  110390  14.6%  31.0%   113904  15.1% smFindIndexesOfExistingSmers
   74017   9.8%  40.8%   124713  16.5% assignSmersToIntermediates
   67599   9.0%  49.7%    67599   9.0% testBloom
   63796   8.4%  58.2%    64871   8.6% calculatePossibleSmersComp
   55690   7.4%  65.6%    55690   7.4% memcpy
   40460   5.4%  70.9%    54055   7.2% assignIntermediatesToEntryLookups
   37304   4.9%  75.8%    44413   5.9% parseAndProcess
   36354   4.8%  80.7%   247992  32.8% scanForSmerLookups
   29178   3.9%  84.5%    29188   3.9% calculatePossibleSmers
   26288   3.5%  88.0%   279159  37.0% trDoIngress
   20512   2.7%  90.7%    88111  11.7% saFindSmerEntry
   14364   1.9%  92.6%    14364   1.9% madvise
   14001   1.9%  94.5%    14001   1.9% packSequence
    9992   1.3%  95.8%   157000  20.8% addPathSmers
    7919   1.0%  96.9%     8652   1.1% hashForSmer
    4977   0.7%  97.5%     4982   0.7% __read_nocancel
    3839   0.5%  98.0%     3852   0.5% sliceForSmer
    3654   0.5%  98.5%     3654   0.5% __memset_sse2
    2065   0.3%  98.8%     2135   0.3% smConsiderResize
				
			


Leak detection:

valgrind --leak-check=full --show-reachable=yes ./LOGAN-Graph-Native/bin/LOGAN data/Ecoli-1/unpacked_Q20.fq 1 1




Intel stuff:

Download: ftp://software.rz.rwth-aachen.de/intel_2015_Gazsfe3hn2

export INTEL_LICENSE_FILE="50017@license2.rz.rwth-aachen.de"

/opt/intel/vtune_amplifier_xe/amplxe-vars.sh 

/opt/intel/vtune_amplifier_xe/bin64/amplxe-gui 



	Pack Kmers

A	0x41	65		0100 0001
C	0x43	67		0100 0011
G	0x47	71		0100 0111
T	0x54	84		0101 0100

00 00
01 00
11 01
10 01





	Calculate Possible Kmers:


	
	Pack -> Smer
		
	Rmer:             -- -- -- --  -- -- -- --  23 22 21 20  19 18 17 16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
	
	Fmer=bswap64(Rmer)
	  
	Fmer:             00 01 02 03  04 05 06 07  08 09 10 11  12 13 14 15  16 17 18 19  20 21 22 23  -- -- -- --  -- -- -- --
	
	Rmer = Rmer << 2bp 
	Fmer = Fmer >> 8bp
	
	
	Fmer1:            00 01 02 03  04 05 06 07  08 09 10 11  12 13 14 15  16 17 18 19  20 21 22 23   
	
	FmerA: (>>1bp)       00 01 02  03 04 05 06  07 08 09 10  11 12 13 14  15 16 17 18  19 20 21 22     
	FmerB:               01 02 03  04 05 06 07  08 09 10 11  12 13 14 15  16 17 18 19  20 21 22 23
	
	Fmer2:  01 02 03  04 05 06 07  08 09 10 11  12 13 14 15  16 17 18 19  20 21 22 23  24*25*26*27*
	
	FmerC: (>>3bp)       02 03 04  05 06 07 08  09 10 11 12  13 14 15 16  17 18 19 20  21 22 23 24*
	FmerD: (>>2bp)       03 04 05  06 07 08 09  10 11 12 13  14 15 16 17  18 19 20 21  22 23 24*25*

	FmerA2: (>>1bp)      04 04 06  07 08 09 10  11 12 13 14  15 16 17 18  19 20 21 22  23 24*25*26*
	FmerB2:              05 06 07  08 09 10 11  12 13 14 15  16 17 18 19  20 21 22 23  24*25*26*27*


	Rmer1:     23 22  21 20 19 18  17 16 15 14  13 12 11 10  09 08 07 06  05 04 03 02  01 00 -- --  

	RmerA: (>>2bp)       22 21 20  19 18 17 16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00     
	RmerB: (>>3bp)       23 22 21  20 19 18 17  16 15 14 13  12 11 10 09  08 07 06 05  04 03 02 01
	
	Rmer2:    27*26*  25*24*23 22  21 20 19 18  17 16 15 14  13 12 11 10  09 08 07 06  05 04 03 02
	
	RmerC:               24*23 22  21 20 19 18  17 16 15 14  13 12 11 10  09 08 07 06  05 04 03 02 
	RmerD: (>>1bp)       25*24*23  22 21 20 19  18 17 16 15  14 13 12 11  10 09 08 07  06 05 04 03 

	RmerA2: (>>2bp)      26*25*24* 23 22 21 20  19 18 17 16  15 14 13 12  11 10 09 08  07 06 05 04 
	RmerB2: (>>3bp)      27*26*25* 24 23 22 21  20 19 18 17  16 15 14 13  12 11 10 09  08 07 06 05

								

								
	Cache Structure:
		32K / 256K / 2-2.5M per core (sandy/ivy/haswell)
					
		Pen D dataset:
			Single: 50M smers * 4 bytes -> 200MB
			Mid: 384K smers * 4 bytes -> 1.5MB
			Slice: 3K smers * 4 bytes -> 12KB
			
		Notional dataset (100x pen D):
			Single: 5000M smers * 4 bytes -> 20GB
			Mid: 38.5M smers * 4 bytes -> 150MB
			Slice: 300K smers * 4 bytes -> 1.2MB
																										
	Bloom filters: Option to speed up SmerArray queries
		Expect true positive rate 10-20%	
		4-8 bits per entry for 2-15% false positive rate
		
		Pen D dataset:
			Single: 50M smers * 4bits -> 25MB
			Mid: 384K smers * 4 bits -> 192KB
			Slice: 3K smers * 4 bits -> 1.5KB
			
		Notional dataset (100x pen D):
			Single: 5000M smers * 4 bits -> 2500MB
			Mid: 38.5M smers * 4 bits -> 19.2MB
			Slice: 300K smers * 4 bits -> 150KB
		
		Consider blocked bloom filters: All queries for a given key hit the same 64 byte region
			Pattern filters also possible (SIMD advantages)
		
	Read batching for lookup: 
		Currently 1000 reads per batch -> ~80 kmers per read -> 80K kmers per batch (~5 per slice). 640KB kmer in flight
		10000 reads per batch -> ~80 kmers per read -> 800K kmers per batch (~50 per slice). 6.4MB kmer in flight
		
		Multiple batches:
		10 batches, 10K per batch -> ~80 kmers per read -> 8M kmers per batch (~500 per slice) 64MB kmer in flight
		20 batches, 10K per batch -> ~80 kmers per read -> 16M kmers per batch (~1000 per slice) 128MB kmer in flight
		100 batches, 10K per batch -> ~80 kmers per read -> 80M kmers per batch (~5000 per slice) 640MB kmer in flight


	Read batching for routing:
		Currently 1000 reads per batch -> ~8 kmers per read -> 8K kmers per batch (~0.5 per slice). 
		10000 reads per batch -> ~8 kmers per read -> 80K kmers per batch (~5 per slice). 
	
		


	Sub-bloom filters:
		Idea: Build one or more 'read batch specific' bloom filters from the smers within a read batch
		Improves cache behaviour
		
		 
				
		
		
Arabi-1 Dataset: Seq: 30,361,968 Bp: 2,364,495,967

Kmers: 154717256
Kmers  occuring <5: 42518318 2434485 1976988 2988053 4500337

1696347756 occurences of Kmers in reads

4004635		0.2360739% in top 10	394418
35389971	2.086245% in top 100	309504
82001337	4.833993% in top 1k	17894
167078291	9.849295% in top 10k	6549
285329471	16.82022% in top 100k	551
465014713	27.4127% in top 1m	57
656224623	38.68456% in top 10m	17
1606781157	94.72003% in top 100m	6


Smers: 7970136
Smers occuring <5: 1394227 103341 109399 178212 270757

220840462 occurences of Smers in reads

3963627		 1.794792% in top 10		390927
34285440	15,52498% in top 100		264374
67480501	30.55622% in top 1k		13637
115890440	52.477% in top 10k		1371
146946106	66.53948% in top 100k		110
166856524	75.55523% in top 1m		15


Pen-1 Dataset: Seq: 454,198,372 Bp: 56,836,998,064

Kmers: 1137524116
Kmers occuring <5: 458338907 31811731 6550250 3139858 1831085

46841584193 occurences of kmers in reads

47503721		0.1014136 in top 10		4494887
391456096 		0.8357021 in top 100	3135391
1045360512		2.231693 in top 1k		245888
1979096824		4.225085 in top 10k		64412
4552130255		9.718139 in top 100k	18558
9634462522		20.56818 in top 1m		2120
14877262117		31.7608 in top 10m		255
23697100801		50.58988 in top 100m	63
46704060077		99.70641 in top 1b		1


Smers: 53836270
Smers occuring <5: 16363353 1308815 294895 150991 92072

6720647410 occurences of Smers in reads

9838707		 0.1463952% in top 10		961497
76152605	 1.133114% in top 100		576106
357584366	 5.320683% in top 1k		192420
1104283164	16.43120% in top 10k		47353
2827041244	42.06501% in top 100k		9819
4536447409	67.50015% in top 1m			562
5652556089	84.10732% in top 10m		59























